// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.api.DbInfrastructure;

#nullable disable

namespace backend.api.Migrations
{
    [DbContext(typeof(PlemionaDbContext))]
    [Migration("20250620115120_addedMoreSeedData")]
    partial class addedMoreSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.core.Models.Building", b =>
                {
                    b.Property<long>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BuildingId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BuildingId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            BuildingId = 1L,
                            Description = "Provied defence against enemies.",
                            Name = "Wall"
                        },
                        new
                        {
                            BuildingId = 2L,
                            Description = "Produce wood.",
                            Name = "Sawmill"
                        });
                });

            modelBuilder.Entity("backend.core.Models.BuildingInstance", b =>
                {
                    b.Property<long>("BuildingInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BuildingInstanceId"));

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<long>("TownId")
                        .HasColumnType("bigint");

                    b.HasKey("BuildingInstanceId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("TownId");

                    b.ToTable("BuildingInstances");

                    b.HasData(
                        new
                        {
                            BuildingInstanceId = 1L,
                            BuildingId = 1L,
                            Level = 1,
                            TownId = 1L
                        });
                });

            modelBuilder.Entity("backend.core.Models.BuildingUpgrade", b =>
                {
                    b.Property<long>("BuildingUpgradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BuildingUpgradeId"));

                    b.Property<long>("BuildingId")
                        .HasColumnType("bigint");

                    b.Property<long>("DurationSeconds")
                        .HasColumnType("bigint");

                    b.Property<int>("Gold")
                        .HasColumnType("integer");

                    b.Property<int>("GrainPerEmployee")
                        .HasColumnType("integer");

                    b.Property<int>("Iron")
                        .HasColumnType("integer");

                    b.Property<int>("PopulationNeeded")
                        .HasColumnType("integer");

                    b.Property<int>("Stone")
                        .HasColumnType("integer");

                    b.Property<int>("Wood")
                        .HasColumnType("integer");

                    b.Property<int>("level")
                        .HasColumnType("integer");

                    b.HasKey("BuildingUpgradeId");

                    b.HasIndex("BuildingId");

                    b.ToTable("BuildingUpgrades");

                    b.HasData(
                        new
                        {
                            BuildingUpgradeId = 1L,
                            BuildingId = 1L,
                            DurationSeconds = 100L,
                            Gold = 50,
                            GrainPerEmployee = 3,
                            Iron = 50,
                            PopulationNeeded = 50,
                            Stone = 100,
                            Wood = 160,
                            level = 1
                        },
                        new
                        {
                            BuildingUpgradeId = 2L,
                            BuildingId = 1L,
                            DurationSeconds = 200L,
                            Gold = 50,
                            GrainPerEmployee = 4,
                            Iron = 50,
                            PopulationNeeded = 70,
                            Stone = 150,
                            Wood = 160,
                            level = 2
                        },
                        new
                        {
                            BuildingUpgradeId = 3L,
                            BuildingId = 2L,
                            DurationSeconds = 30L,
                            Gold = 5,
                            GrainPerEmployee = 3,
                            Iron = 5,
                            PopulationNeeded = 50,
                            Stone = 10,
                            Wood = 16,
                            level = 1
                        },
                        new
                        {
                            BuildingUpgradeId = 4L,
                            BuildingId = 2L,
                            DurationSeconds = 50L,
                            Gold = 10,
                            GrainPerEmployee = 4,
                            Iron = 15,
                            PopulationNeeded = 70,
                            Stone = 10,
                            Wood = 10,
                            level = 2
                        });
                });

            modelBuilder.Entity("backend.core.Models.Player", b =>
                {
                    b.Property<long>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PlayerId"));

                    b.Property<int>("Gold")
                        .HasColumnType("integer");

                    b.Property<int>("Grain")
                        .HasColumnType("integer");

                    b.Property<int>("Iron")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Stone")
                        .HasColumnType("integer");

                    b.Property<int>("Wood")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerId = 1L,
                            Gold = 100,
                            Grain = 1000,
                            Iron = 300,
                            Name = "Henry",
                            Stone = 200,
                            Wood = 400
                        },
                        new
                        {
                            PlayerId = 2L,
                            Gold = 100,
                            Grain = 100,
                            Iron = 250,
                            Name = "John",
                            Stone = 200,
                            Wood = 400
                        });
                });

            modelBuilder.Entity("backend.core.Models.Town", b =>
                {
                    b.Property<long>("TownId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TownId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Population")
                        .HasColumnType("integer");

                    b.Property<int>("X_coordinate")
                        .HasColumnType("integer");

                    b.Property<int>("Y_coordinate")
                        .HasColumnType("integer");

                    b.HasKey("TownId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Towns");

                    b.HasData(
                        new
                        {
                            TownId = 1L,
                            Name = "Alexandia",
                            PlayerId = 1L,
                            Population = 500,
                            X_coordinate = 10,
                            Y_coordinate = 25
                        });
                });

            modelBuilder.Entity("backend.core.Models.BuildingInstance", b =>
                {
                    b.HasOne("backend.core.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.core.Models.Town", "Town")
                        .WithMany("BuildingInstances")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("backend.core.Models.BuildingUpgrade", b =>
                {
                    b.HasOne("backend.core.Models.Building", null)
                        .WithMany("BuildingUpgrades")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.core.Models.Town", b =>
                {
                    b.HasOne("backend.core.Models.Player", "Player")
                        .WithMany("Towns")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("backend.core.Models.Building", b =>
                {
                    b.Navigation("BuildingUpgrades");
                });

            modelBuilder.Entity("backend.core.Models.Player", b =>
                {
                    b.Navigation("Towns");
                });

            modelBuilder.Entity("backend.core.Models.Town", b =>
                {
                    b.Navigation("BuildingInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
